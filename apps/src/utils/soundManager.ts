// src/utils/SoundManager.ts
import {
  createAudioPlayer,
  AudioPlayer,
  AudioSource,
  setAudioModeAsync,
  // h√†m setAudioModeAsync n·∫±m ·ªü namespace Audio
} from 'expo-audio'

class SoundManager {
  private backgroundPlayer: AudioPlayer | null = null
  private sfxPlayer: AudioPlayer | null = null

  constructor() {
    // Fire-and-forget: c·∫•u h√¨nh audio ngay khi app kh·ªüi t·∫°o
    setAudioModeAsync({
      allowsRecording: false,
      interruptionMode: 'duckOthers', // thay cho InterruptionModeIOS.DuckOthers
      interruptionModeAndroid: 'duckOthers',
      playsInSilentMode: true,
      shouldPlayInBackground: true,
      shouldRouteThroughEarpiece: false,
    }).catch(console.warn) // kh√¥ng l√†m ‚Äúv·ª°‚Äù app n·∫øu l·ªói c·∫•u h√¨nh
  }

  /** üîä Ph√°t nh·∫°c n·ªÅn (l·∫∑p v√¥ h·∫°n) */
  async playBackgroundSound(source: AudioSource) {
    if (this.backgroundPlayer) return // ƒë√£ c√≥ th√¨ b·ªè qua
    this.backgroundPlayer = createAudioPlayer(source) // :contentReference[oaicite:0]{index=0}
    this.backgroundPlayer.loop = true
    await this.backgroundPlayer.play() // play() kh√¥ng tr·∫£ Promise, nh∆∞ng await OK
  }

  /** ‚èπÔ∏è D·ª´ng nh·∫°c n·ªÅn */
  async stopBackgroundSound() {
    if (!this.backgroundPlayer) return
    this.backgroundPlayer.pause()
    this.backgroundPlayer.remove() // gi·∫£i ph√≥ng t√†i nguy√™n :contentReference[oaicite:1]{index=1}
    this.backgroundPlayer = null
  }

  /** üéµ Ph√°t SFX duy nh·∫•t (ghi ƒë√® c√°i tr∆∞·ªõc) */
  async playSFX(source: AudioSource) {
    if (this.sfxPlayer) {
      this.sfxPlayer.remove()
      this.sfxPlayer = null
    }
    this.sfxPlayer = createAudioPlayer(source)
    this.sfxPlayer.play()
  }

  /** ‚èπÔ∏è D·ª´ng t·∫•t c·∫£ */
  async stopAllSounds() {
    await this.stopBackgroundSound()
    if (this.sfxPlayer) {
      this.sfxPlayer.remove()
      this.sfxPlayer = null
    }
  }
}

export default new SoundManager()
