import React, { useState, useEffect } from 'react'
import { View, Text, TouchableOpacity, ScrollView, TextInput, Alert } from 'react-native'
import { SafeAreaView } from 'react-native-safe-area-context'
import { AntDesign } from '@expo/vector-icons'
import { router } from 'expo-router'
import { ERouteTable } from '@/constants/route-table'

interface CreativityChallenge {
  id: string
  title: string
  description: string
  category: string
  timeLimit: number // seconds
  minIdeas: number
  evaluationCriteria: {
    creativity: string
    feasibility: string
    originality: string
  }
  inspirationHints: string[]
}

const creativityChallenges: CreativityChallenge[] = [
  {
    id: '1',
    title: 'Gi·∫£i ph√°p cho t·∫Øc ƒë∆∞·ªùng',
    description: 'H√£y nghƒ© ra c√°c gi·∫£i ph√°p s√°ng t·∫°o ƒë·ªÉ gi·∫£m t·∫Øc ƒë∆∞·ªùng trong th√†nh ph·ªë. Kh√¥ng gi·ªõi h·∫°n v·ªÅ c√¥ng ngh·ªá hay chi ph√≠.',
    category: 'Giao th√¥ng',
    timeLimit: 300, // 5 ph√∫t
    minIdeas: 5,
    evaluationCriteria: {
      creativity: '√ù t∆∞·ªüng ƒë·ªôc ƒë√°o, kh√¥ng theo l·ªëi m√≤n',
      feasibility: 'C√≥ th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c trong th·ª±c t·∫ø',
      originality: 'M·ªõi l·∫°, ch∆∞a t·ª´ng ƒë∆∞·ª£c √°p d·ª•ng'
    },
    inspirationHints: [
      'Nghƒ© v·ªÅ c√¥ng ngh·ªá AI v√† IoT',
      'Xem x√©t t·ª´ g√≥c ƒë·ªô h√†nh vi con ng∆∞·ªùi',
      'T·∫≠n d·ª•ng kh√¥ng gian ng·∫ßm ho·∫∑c tr√™n cao',
      'K·∫øt h·ª£p v·ªõi c√°c ho·∫°t ƒë·ªông kh√°c'
    ]
  },
  {
    id: '2',
    title: '·ª®ng d·ª•ng h·ªçc t·∫≠p th√∫ v·ªã',
    description: 'T·∫°o ra √Ω t∆∞·ªüng cho m·ªôt ·ª©ng d·ª•ng h·ªçc t·∫≠p m·ªõi, gi√∫p h·ªçc sinh c·∫£m th·∫•y h·ª©ng th√∫ v√† h·ªçc hi·ªáu qu·∫£ h∆°n.',
    category: 'Gi√°o d·ª•c',
    timeLimit: 300,
    minIdeas: 6,
    evaluationCriteria: {
      creativity: 'C√°ch ti·∫øp c·∫≠n h·ªçc t·∫≠p m·ªõi m·∫ª',
      feasibility: 'C√≥ th·ªÉ ph√°t tri·ªÉn v·ªõi c√¥ng ngh·ªá hi·ªán t·∫°i',
      originality: 'Kh√°c bi·ªát v·ªõi c√°c app hi·ªán c√≥'
    },
    inspirationHints: [
      'K·∫øt h·ª£p game v√† h·ªçc t·∫≠p',
      'S·ª≠ d·ª•ng AR/VR',
      'T·∫°o c·ªông ƒë·ªìng h·ªçc t·∫≠p',
      'C√° nh√¢n h√≥a tr·∫£i nghi·ªám'
    ]
  },
  {
    id: '3',
    title: 'S·∫£n ph·∫©m th√¢n thi·ªán m√¥i tr∆∞·ªùng',
    description: 'Nghƒ© ra c√°c s·∫£n ph·∫©m h√†ng ng√†y c√≥ th·ªÉ thay th·∫ø ƒë·ªì nh·ª±a, gi√∫p b·∫£o v·ªá m√¥i tr∆∞·ªùng m√† v·∫´n ti·ªán l·ª£i.',
    category: 'M√¥i tr∆∞·ªùng',
    timeLimit: 300,
    minIdeas: 7,
    evaluationCriteria: {
      creativity: 'V·∫≠t li·ªáu v√† thi·∫øt k·∫ø s√°ng t·∫°o',
      feasibility: 'C√≥ th·ªÉ s·∫£n xu·∫•t v√† s·ª≠ d·ª•ng r·ªông r√£i',
      originality: 'Ch∆∞a c√≥ tr√™n th·ªã tr∆∞·ªùng'
    },
    inspirationHints: [
      'S·ª≠ d·ª•ng v·∫≠t li·ªáu t·ª± nhi√™n',
      'Thi·∫øt k·∫ø ƒëa nƒÉng',
      'T√°i s·ª≠ d·ª•ng v√† t√°i ch·∫ø',
      'Gi·∫£m thi·ªÉu ch·∫•t th·∫£i'
    ]
  }
]

interface Idea {
  id: string
  text: string
  category: 'creative' | 'feasible' | 'original'
}

export default function CreativityGame() {
  const [currentChallenge, setCurrentChallenge] = useState(0)
  const [ideas, setIdeas] = useState<Idea[]>([])
  const [currentIdea, setCurrentIdea] = useState('')
  const [timeLeft, setTimeLeft] = useState(0)
  const [gameStarted, setGameStarted] = useState(false)
  const [gameCompleted, setGameCompleted] = useState(false)
  const [showEvaluation, setShowEvaluation] = useState(false)
  const [totalScore, setTotalScore] = useState(0)

  const challenge = creativityChallenges[currentChallenge]

  useEffect(() => {
    let interval: number
    if (gameStarted && timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            handleTimeUp()
            return 0
          }
          return prev - 1
        })
      }, 1000)
    }
    return () => clearInterval(interval)
  }, [gameStarted, timeLeft])

  const startChallenge = () => {
    setGameStarted(true)
    setTimeLeft(challenge.timeLimit)
    setIdeas([])
    setCurrentIdea('')
  }

  const addIdea = () => {
    if (currentIdea.trim().length < 10) {
      Alert.alert('G·ª£i √Ω', '√ù t∆∞·ªüng c·ªßa b·∫°n c·∫ßn √≠t nh·∫•t 10 k√Ω t·ª± ƒë·ªÉ ƒë∆∞·ª£c ch·∫•p nh·∫≠n!')
      return
    }

    const newIdea: Idea = {
      id: Date.now().toString(),
      text: currentIdea.trim(),
      category: 'creative' // M·∫∑c ƒë·ªãnh, s·∫Ω ƒë∆∞·ª£c ƒë√°nh gi√° sau
    }

    setIdeas(prev => [...prev, newIdea])
    setCurrentIdea('')
  }

  const handleTimeUp = () => {
    setGameStarted(false)
    if (ideas.length >= challenge.minIdeas) {
      setShowEvaluation(true)
    } else {
      Alert.alert(
        'H·∫øt th·ªùi gian!',
        `B·∫°n c·∫ßn √≠t nh·∫•t ${challenge.minIdeas} √Ω t∆∞·ªüng. B·∫°n ch·ªâ c√≥ ${ideas.length} √Ω t∆∞·ªüng. H√£y th·ª≠ l·∫°i!`,
        [{ text: 'OK', onPress: () => setGameStarted(false) }]
      )
    }
  }

  const evaluateIdeas = () => {
    // T√≠nh ƒëi·ªÉm d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† ch·∫•t l∆∞·ª£ng √Ω t∆∞·ªüng
    let score = 0
    
    // ƒêi·ªÉm cho s·ªë l∆∞·ª£ng
    const quantityBonus = Math.min(ideas.length - challenge.minIdeas, 5) * 5
    score += quantityBonus

    // ƒêi·ªÉm cho t·ª´ng √Ω t∆∞·ªüng (gi·∫£ l·∫≠p ƒë√°nh gi√°)
    ideas.forEach(() => {
      score += Math.floor(Math.random() * 15) + 5 // 5-20 ƒëi·ªÉm m·ªói √Ω t∆∞·ªüng
    })

    setTotalScore(prev => prev + score)
    
    if (currentChallenge < creativityChallenges.length - 1) {
      setCurrentChallenge(prev => prev + 1)
      setGameStarted(false)
      setShowEvaluation(false)
      setIdeas([])
      setCurrentIdea('')
    } else {
      setGameCompleted(true)
    }
  }

  const handleContinue = () => {
    const finalScore = Math.round((totalScore / 300) * 100) // 300 l√† ƒëi·ªÉm t·ªëi ƒëa c√≥ th·ªÉ
    router.push({
      pathname: ERouteTable.RESULT_SITUATION,
      params: {
        type: finalScore >= 70 ? 'win' : 'lose',
        totalScore: totalScore,
        maxScore: 300,
      },
    })
  }

  const resetGame = () => {
    setCurrentChallenge(0)
    setGameStarted(false)
    setGameCompleted(false)
    setShowEvaluation(false)
    setIdeas([])
    setCurrentIdea('')
    setTimeLeft(0)
    setTotalScore(0)
  }

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  if (gameCompleted) {
    return (
      <SafeAreaView className="flex-1 bg-gradient-to-b from-pink-50 to-purple-50">
        <View className="flex-1 p-6">
          <View className="items-center mb-8">
            <Text className="text-4xl mb-4">üé®</Text>
            <Text className="text-2xl font-bold text-gray-800 mb-2">S√°ng t·∫°o ho√†n th√†nh!</Text>
            <Text className="text-lg text-gray-600">T·ªïng ƒëi·ªÉm: {totalScore}/300</Text>
          </View>

          <View className="bg-white rounded-2xl p-6 mb-6 shadow-md">
            <Text className="text-lg font-semibold text-gray-800 mb-4">Th·ªëng k√™ s√°ng t·∫°o:</Text>
            <View style={{ gap: 12 }}>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">S·ªë th·ª≠ th√°ch ho√†n th√†nh:</Text>
                <Text className="font-semibold">{creativityChallenges.length}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">T·ªïng s·ªë √Ω t∆∞·ªüng:</Text>
                <Text className="font-semibold">{ideas.length}</Text>
              </View>
              <View className="flex-row justify-between">
                <Text className="text-gray-600">ƒêi·ªÉm trung b√¨nh:</Text>
                <Text className="font-semibold">{Math.round(totalScore / creativityChallenges.length)}</Text>
              </View>
            </View>
          </View>

          <View style={{ gap: 12 }}>
            <TouchableOpacity
              onPress={handleContinue}
              className="bg-pink-600 py-4 rounded-full"
            >
              <Text className="text-white text-center font-bold text-lg">Xem k·∫øt qu·∫£</Text>
            </TouchableOpacity>
            
            <TouchableOpacity
              onPress={resetGame}
              className="border-2 border-pink-600 py-4 rounded-full"
            >
              <Text className="text-pink-600 text-center font-bold text-lg">Ch∆°i l·∫°i</Text>
            </TouchableOpacity>
          </View>
        </View>
      </SafeAreaView>
    )
  }

  if (showEvaluation) {
    return (
      <SafeAreaView className="flex-1 bg-gradient-to-b from-pink-50 to-purple-50">
        <View className="flex-1 p-6">
          <View className="items-center mb-6">
            <Text className="text-4xl mb-4">‚ú®</Text>
            <Text className="text-xl font-bold text-gray-800 mb-2">ƒê√°nh gi√° √Ω t∆∞·ªüng</Text>
            <Text className="text-gray-600">B·∫°n ƒë√£ t·∫°o ra {ideas.length} √Ω t∆∞·ªüng!</Text>
          </View>

          <ScrollView className="flex-1 mb-6">
            <View className="space-y-4">
              {ideas.map((idea, index) => (
                <View key={idea.id} className="bg-white rounded-xl p-4 shadow-md">
                  <View className="flex-row items-start">
                    <View className="bg-pink-100 rounded-full p-2 mr-3 mt-1">
                      <Text className="text-pink-600 font-bold text-sm">{index + 1}</Text>
                    </View>
                    <View className="flex-1">
                      <Text className="text-gray-800 leading-5">{idea.text}</Text>
                      <View className="flex-row mt-2">
                        <View className="bg-green-100 rounded-full px-3 py-1 mr-2">
                          <Text className="text-green-600 text-xs">S√°ng t·∫°o</Text>
                        </View>
                        <View className="bg-blue-100 rounded-full px-3 py-1 mr-2">
                          <Text className="text-blue-600 text-xs">Kh·∫£ thi</Text>
                        </View>
                        <View className="bg-purple-100 rounded-full px-3 py-1">
                          <Text className="text-purple-600 text-xs">ƒê·ªôc ƒë√°o</Text>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              ))}
            </View>
          </ScrollView>

          <TouchableOpacity
            onPress={evaluateIdeas}
            className="bg-pink-600 py-4 rounded-full"
          >
            <Text className="text-white text-center font-bold text-lg">
              {currentChallenge < creativityChallenges.length - 1 ? 'Th·ª≠ th√°ch ti·∫øp theo' : 'Ho√†n th√†nh'}
            </Text>
          </TouchableOpacity>
        </View>
      </SafeAreaView>
    )
  }

  return (
    <SafeAreaView className="flex-1 bg-gradient-to-b from-pink-50 to-purple-50">
      {/* Header */}
      <View className="flex-row items-center p-4">
        <TouchableOpacity
          onPress={() => router.back()}
          className="bg-white h-12 w-12 items-center justify-center rounded-full shadow-md"
        >
          <AntDesign name="left" size={24} color="#6B7280" />
        </TouchableOpacity>
        <Text className="flex-1 text-center text-lg font-semibold mr-10 text-gray-800">
          Brainstorming s√°ng t·∫°o
        </Text>
      </View>

      <ScrollView className="flex-1 p-6" showsVerticalScrollIndicator={false}>
        {/* Challenge Info */}
        <View className="bg-white rounded-2xl p-6 mb-6 shadow-md">
          <View className="flex-row items-center mb-4">
            <View className="bg-pink-100 rounded-full p-3 mr-3">
              <Text className="text-2xl">üí°</Text>
            </View>
            <View className="flex-1">
              <Text className="text-lg font-semibold text-gray-800">{challenge.title}</Text>
              <Text className="text-sm text-gray-500">{challenge.category}</Text>
            </View>
          </View>
          
          <Text className="text-gray-700 leading-6 mb-4">{challenge.description}</Text>
          
          <View className="bg-yellow-50 rounded-lg p-4 mb-4">
            <Text className="text-yellow-800 font-semibold mb-2">M·ª•c ti√™u:</Text>
            <Text className="text-yellow-700">T·∫°o ra √≠t nh·∫•t {challenge.minIdeas} √Ω t∆∞·ªüng trong {challenge.timeLimit / 60} ph√∫t</Text>
          </View>

          {/* Timer */}
          {gameStarted && (
            <View className="bg-red-50 rounded-lg p-4 mb-4">
              <View className="flex-row justify-between items-center">
                <Text className="text-red-800 font-semibold">Th·ªùi gian c√≤n l·∫°i:</Text>
                <Text className={`text-2xl font-bold ${timeLeft <= 60 ? 'text-red-600' : 'text-red-800'}`}>
                  {formatTime(timeLeft)}
                </Text>
              </View>
              <View className="w-full bg-gray-200 rounded-full h-2 mt-2">
                <View 
                  className={`h-2 rounded-full ${timeLeft <= 60 ? 'bg-red-500' : 'bg-red-600'}`}
                  style={{ width: `${(timeLeft / challenge.timeLimit) * 100}%` }}
                />
              </View>
            </View>
          )}
        </View>

        {/* Inspiration Hints */}
        <View className="bg-white rounded-2xl p-6 mb-6 shadow-md">
          <Text className="text-lg font-semibold text-gray-800 mb-4">üí≠ G·ª£i √Ω s√°ng t·∫°o:</Text>
          <View className="space-y-2">
            {challenge.inspirationHints.map((hint, index) => (
              <View key={index} className="flex-row items-start">
                <Text className="text-pink-500 mr-2">‚Ä¢</Text>
                <Text className="text-gray-700 flex-1">{hint}</Text>
              </View>
            ))}
          </View>
        </View>

        {/* Ideas Input */}
        {gameStarted && (
          <View className="bg-white rounded-2xl p-6 mb-6 shadow-md">
            <Text className="text-lg font-semibold text-gray-800 mb-4">
              √ù t∆∞·ªüng c·ªßa b·∫°n ({ideas.length}):
            </Text>
            
            <View className="flex-row items-end mb-4">
              <View className="flex-1 mr-3">
                <TextInput
                  value={currentIdea}
                  onChangeText={setCurrentIdea}
                  placeholder="Nh·∫≠p √Ω t∆∞·ªüng s√°ng t·∫°o c·ªßa b·∫°n..."
                  multiline
                  className="border-2 border-gray-200 rounded-xl p-3 text-gray-800"
                  style={{ minHeight: 80 }}
                />
              </View>
              <TouchableOpacity
                onPress={addIdea}
                disabled={!currentIdea.trim()}
                className={`p-3 rounded-xl ${
                  currentIdea.trim() ? 'bg-pink-600' : 'bg-gray-300'
                }`}
              >
                <AntDesign 
                  name="plus" 
                  size={24} 
                  color={currentIdea.trim() ? 'white' : 'gray'} 
                />
              </TouchableOpacity>
            </View>

            {/* Ideas List */}
            {ideas.length > 0 && (
            <View style={{ gap: 12 }}>
              {ideas.map((idea, index) => (
                <View key={idea.id} className="bg-gray-50 rounded-lg p-3">
                  <View className="flex-row items-start">
                    <View className="bg-pink-100 rounded-full p-2 mr-3 mt-1">
                      <Text className="text-pink-600 font-bold text-sm">{index + 1}</Text>
                    </View>
                    <Text className="text-gray-800 flex-1">{idea.text}</Text>
                  </View>
                </View>
              ))}
            </View>
            )}
          </View>
        )}

        {/* Start Button */}
        {!gameStarted && (
          <TouchableOpacity
            onPress={startChallenge}
            className="bg-pink-600 py-4 rounded-full"
          >
            <Text className="text-white text-center font-bold text-lg">
              B·∫Øt ƒë·∫ßu th·ª≠ th√°ch s√°ng t·∫°o
            </Text>
          </TouchableOpacity>
        )}
      </ScrollView>
    </SafeAreaView>
  )
}
